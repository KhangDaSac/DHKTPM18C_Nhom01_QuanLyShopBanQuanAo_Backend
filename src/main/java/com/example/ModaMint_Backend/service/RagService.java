package com.example.ModaMint_Backend.service;

import com.example.ModaMint_Backend.entity.Product;
import com.example.ModaMint_Backend.entity.ProductVariant;
import com.example.ModaMint_Backend.repository.ProductRepository;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@RequiredArgsConstructor
public class RagService {

    ProductRepository productRepository;


    public String retrieveContext() {
        List<Product> products = productRepository.findAll();
        if (products.isEmpty()) {
            return "No products found in the store.";
        }

        return products.stream()
                .map(p -> {
                    // L·∫•y danh s√°ch bi·∫øn th·ªÉ chi ti·∫øt
                    String variantsInfo = p.getProductVariants().stream()
                            .map(v -> String.format(
                                    """
                                    ‚Ä¢ Bi·∫øn th·ªÉ #%d:
                                        - M√†u s·∫Øc: %s
                                        - K√≠ch th∆∞·ªõc: %s
                                        - Gi√° g·ªëc: %,.0f VNƒê
                                        - Gi·∫£m gi√°: %s
                                        - Gi√° ph·ª• th√™m: %,.0f VNƒê
                                        - S·ªë l∆∞·ª£ng t·ªìn kho: %d
                                    """,
                                    v.getId(),
                                    v.getColor() != null ? v.getColor() : "Kh√¥ng x√°c ƒë·ªãnh",
                                    v.getSize() != null ? v.getSize() : "Kh√¥ng x√°c ƒë·ªãnh",
                                    v.getPrice() != null ? v.getPrice().doubleValue() : 0,
                                    v.getDiscount() != null ? v.getDiscount() + " VNƒê" : "Kh√¥ng c√≥",
                                    v.getAdditionalPrice() != null ? v.getAdditionalPrice().doubleValue() : 0,
                                    v.getQuantity() != null ? v.getQuantity() : 0
                            ))
                            .collect(Collectors.joining("\n"));

                    // T·∫°o chu·ªói m√¥ t·∫£ chi ti·∫øt s·∫£n ph·∫©m
                    return String.format(
                            """
                            üßæ M√£ s·∫£n ph·∫©m: %d
                            üîπ T√™n: %s
                            üîπ M√¥ t·∫£: %s
                            üîπ Danh m·ª•c ID: %d
                            üîπ Th∆∞∆°ng hi·ªáu ID: %d
                            üîπ Tr·∫°ng th√°i: %s
                            üîπ S·ªë bi·∫øn th·ªÉ: %d
                            %s
                            """,
                            p.getId(),
                            p.getName(),
                            p.getDescription(),
                            p.getCategoryId(),
                            p.getBrandId(),
                            p.getActive() ? "ƒêang b√°n" : "Ng·ª´ng b√°n",
                            p.getProductVariants().size(),
                            variantsInfo.isEmpty() ? "   (Ch∆∞a c√≥ bi·∫øn th·ªÉ)" : variantsInfo
                    );
                })
                .collect(Collectors.joining("\n------------------------------------------------\n"));
    }
}
